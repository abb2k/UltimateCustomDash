h:
#pragma once
#include <include.h>
#include "CNGameLayer.h"

class SpaceUK : public cocos2d::CCLayer {
protected:
    virtual bool init(CNGameLayer* gameLayer, float opportunity, int AILevel);

    virtual void update(float delta);
public:
    static SpaceUK* create(CNGameLayer* gameLayer, float opportunity, int AILevel);

    CNGameLayer* mainLayer;

    float _opportunity;

    float opportunityTimer;

    int _AILevel;

    void OnOpportunity();

    CCSprite* spaceUKIcon;

    CCNode* MaskPCLayer;

    PlayLayer* minigame;

    bool destroyPlay;

    CCLabelTTF* dtext;

    bool nightstartUnpause;

    void jumpBetween(float x1, float x2);
};

cpp:
#include "SpaceUK.h"

SpaceUK* SpaceUK::create(CNGameLayer* gameLayer, float opportunity, int AILevel) {
    auto ret = new SpaceUK();
    if (ret && ret->init(gameLayer, opportunity, AILevel)) {
        ret->autorelease();
    } else {
        delete ret;
        ret = nullptr;
    }
    return ret;
}

bool SpaceUK::init(CNGameLayer* gameLayer, float opportunity, int AILevel){

    mainLayer = gameLayer;
    _opportunity = opportunity;
    opportunityTimer = opportunity;
    _AILevel = AILevel;

    spaceUKIcon = CCSprite::create("spaceIcon.png"_spr);
    spaceUKIcon->setPosition({-97, -90});
    spaceUKIcon->setScale(3.45f);
    spaceUKIcon->setRotationX(-8);
    spaceUKIcon->setRotationY(4);
    mainLayer->Cam08->addChild(spaceUKIcon);

    CCPoint* center = new CCPoint[]{
        {-132,-9},
        {-138,70},
        {23,69},
        {21,-17}
    };
    ccColor4F col = {255,255,255,255};

    auto stencil = CCDrawNode::create();
    stencil->drawPolygon(center, 4, col, 1.0f, col);

    auto clipper = CCClippingNode::create();
    clipper->setStencil(stencil);
    mainLayer->Cam08->addChild(clipper);

    MaskPCLayer = CCNode::create();
    MaskPCLayer->setPosition({((center[1].x + center[2].x) / 2), ((center[1].y + center[3].y) / 2)});
    MaskPCLayer->setRotationX(-2);
    MaskPCLayer->setRotationY(1);
    clipper->addChild(MaskPCLayer);

    GJGameLevel* level = GJGameLevel::create();
    level->m_songID = -1;
    level->m_levelString = "";
    level->m_coins = 3;

    minigame = PlayLayer::create(level);
    minigame->setPosition({-284, -159});
    minigame->setScale(0.275f);
    minigame->setTouchEnabled(false);
    minigame->setKeyboardEnabled(false);
    minigame->setTouchMode(kCCTouchesOneByOne);
    minigame->setKeypadEnabled(false);
    minigame->setTouchPriority(-100);
    minigame->m_debugPauseOff = true;

    minigame->m_objectLayer->setTouchEnabled(false);
    minigame->m_objectLayer->setKeyboardEnabled(false);
    minigame->m_objectLayer->setTouchMode(kCCTouchesOneByOne);
    minigame->m_objectLayer->setKeypadEnabled(false);
    minigame->m_objectLayer->setTouchPriority(-100);

    minigame->m_player1->m_unk65C->setTouchEnabled(false);
    minigame->m_player1->m_unk65C->setKeyboardEnabled(false);
    minigame->m_player1->m_unk65C->setTouchMode(kCCTouchesOneByOne);
    minigame->m_player1->m_unk65C->setKeypadEnabled(false);
    minigame->m_player1->m_unk65C->setTouchPriority(-100);

    minigame->m_player2->m_unk65C->setTouchEnabled(false);
    minigame->m_player2->m_unk65C->setKeyboardEnabled(false);
    minigame->m_player2->m_unk65C->setTouchMode(kCCTouchesOneByOne);
    minigame->m_player2->m_unk65C->setKeypadEnabled(false);
    minigame->m_player2->m_unk65C->setTouchPriority(-100);

    minigame->m_UILayer->setTouchEnabled(false);
    minigame->m_UILayer->setKeyboardEnabled(false);
    minigame->m_UILayer->setTouchMode(kCCTouchesOneByOne);
    minigame->m_UILayer->setKeypadEnabled(false);
    minigame->m_UILayer->setTouchPriority(-100);
    MaskPCLayer->addChild(minigame);
    minigame->pauseGame(true);

    dtext = CCTextFieldTTF::create("", "chatFont.fnt", 15);
    dtext->setPosition({180, 80});
    //dtext->setVisible(false);
    this->addChild(dtext);

    auto director = CCDirector::sharedDirector();
    auto glview = director->getOpenGLView();
    glview->showCursor(true);

    scheduleUpdate();

    return true;
}

void SpaceUK::update(float delta){
    if (mainLayer->NIGHTSTARTED){
        if (opportunityTimer > 0){
            opportunityTimer -= delta;
        }
        else{
            opportunityTimer = _opportunity;
            int oppCalc = 1 + (rand() % 22);
            if (_AILevel != 0 && _AILevel >= oppCalc){
                OnOpportunity();
            }
        }

        if (minigame != nullptr){
            if (minigame->m_hasCompletedLevel){
                minigame->m_hasCompletedLevel = false;
                minigame->resetLevel();
            }

            CCObject* curr = nullptr;
            if (minigame != nullptr){
                CCARRAY_FOREACH(minigame->getChildren(), curr){
                    CCLabelBMFont* labl = dynamic_cast<CCLabelBMFont*>(curr);
                    if (labl != 0){
                        labl->setOpacity(0);
                        labl->setString("");
                    }
                }
                dtext->setString(std::to_string(minigame->m_player1->getPositionX()).c_str());
            }
        }
        auto director = CCDirector::sharedDirector();
        auto glview = director->getOpenGLView();
        glview->showCursor(true);

        jumpBetween(-100, 200);

        jumpBetween(440, 480);

        jumpBetween(800, 950);

        jumpBetween(1400, 1650);

        jumpBetween(2330, 2550);

        jumpBetween(2830, 2900);

        jumpBetween(2970, 3030);

        jumpBetween(3210, 3270);

        jumpBetween(3500, 3570);

        jumpBetween(3720, 4400);

        jumpBetween(4570, 4610);

        jumpBetween(4830, 4860);

        jumpBetween(5360, 5400);

        jumpBetween(5480, 5580);

        jumpBetween(5830, 6020);

        jumpBetween(6190, 6240);

        jumpBetween(6440, 6960);

        jumpBetween(8000, 8050);

        jumpBetween(8260, 8340);

        jumpBetween(8400, 8500);

        jumpBetween(9300, 9400);

        jumpBetween(9540, 9620);

        jumpBetween(9760, 9820);

        jumpBetween(9940, 10120);

        jumpBetween(10330, 10400);

        jumpBetween(10500, 10580);

        jumpBetween(10660, 10730);

        jumpBetween(10800, 11100);

        jumpBetween(11300, 11450);

        jumpBetween(11650, 11850);

        jumpBetween(12970, 13400);

        jumpBetween(13650, 14440);

        jumpBetween(14790, 14810);

        jumpBetween(15090, 15130);

        jumpBetween(15620, 15800);

        jumpBetween(15990, 16140);

        jumpBetween(16290, 16420);

        jumpBetween(16580, 16640);

        jumpBetween(16835, 16880);

        jumpBetween(17060, 17100);

        jumpBetween(17280, 17340);

        jumpBetween(17535, 17940);

        jumpBetween(18350, 18400);

        jumpBetween(18820, 18880);

        jumpBetween(19120, 19160);

        jumpBetween(19277, 19687);

        jumpBetween(20074, 20384);

        jumpBetween(20682, 20725);

        jumpBetween(20918, 20970);

        jumpBetween(21250, 21722);

        jumpBetween(21795, 21843);

        jumpBetween(22101, 22290);

        jumpBetween(22427, 23020);

        jumpBetween(23140, 23220);

        jumpBetween(23535, 23606);

        jumpBetween(23699, 23753);

        jumpBetween(24070, 24182);

        jumpBetween(24294, 24333);

        jumpBetween(24450, 24534);

        jumpBetween(24715, 24994);

        jumpBetween(25214, 25330);

        jumpBetween(25480, 25620);

        jumpBetween(25735, 25810);

        jumpBetween(25910, 26021);

        if (!nightstartUnpause){
            nightstartUnpause = true;
            minigame->pauseGame(false);
        }
    }
    
    if (mainLayer->escaped){
        if (!destroyPlay){
            destroyPlay = true;
            //minigame->removeMeAndCleanup();
            minigame->pauseGame(true);
            minigame = nullptr;
        }
    }
    if (mainLayer->DEATHSCREEN){
        if (!destroyPlay){
            destroyPlay = true;
            //minigame->removeMeAndCleanup();
            minigame->pauseGame(true);
            minigame = nullptr;
        }
    }
    if (mainLayer->nightComplete){
        if (!destroyPlay){
            destroyPlay = true;
            //minigame->removeMeAndCleanup();
            minigame->pauseGame(true);
            minigame = nullptr;
        }
    }
}

void SpaceUK::OnOpportunity(){

}

void SpaceUK::jumpBetween(float x1, float x2){
    if (minigame != nullptr){
        float x = minigame->m_player1->getPositionX();
    
        if (x > x1 && x < x2){
            minigame->pushButton(0, true);
        }
        if (x > x2){
            minigame->releaseButton(0, true);
        }
    }
}